<?php
/* === Style Guide ============================================================ *
 * Copyright (c) 2017-2018 Mootly Obviate - See /LICENSE.md
 * --- Revision History ------------------------------------------------------- *
 * 2018-05-09 | Copied over from test page.
 * ---------------------------------------------------------------------------- */
                    # Call config to init the application
require_once( $_SERVER['DOCUMENT_ROOT'].'/config.php' );
                    # Build the page ------------------------------------------ *
                    # Content developers shouldn't touch anything above here.
                    # ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ EDIT BELOW ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
                    # page_name should equal your H1 title.
$mpo_parts->h1_title          = 'Classes: mpc_paths';
$mpo_parts->link_title        = 'mpc_paths';
$mpo_parts->page_name         = $mpo_parts->h1_title;
$mpo_parts->section_name      = 'Documentation: Class Library';
$mpo_parts->section_base      = '/docs';
$mpo_parts->accessibility     = 'standard';
$mpo_parts->pagemenu          = 'perm';
$mpo_parts->bodyclasses       = 'final';
$page_path                    = $mpo_parts->page_path;
                    # import page components that are not generated by template.
require_once( $mpo_paths->php_widgets.'/menus/simple_crumbs.php' );
                    # The main content body of the page is developed here.
                    # It can be built from pieces or written as a block,
                    # depending on the site.
ob_start();
?>
<!-- *** BEGIN CONTENT ******************************************************** -->

<p>The <cite>paths</cite> object stores internal paths for PHP use. This is to allow paths to be defined up front and then called from the object. This reduces typos and inconsistencies.</p>

<p>If a path is hard-coded in the process code instead of being defined in the config or init files, you did something wrong.</p>

<p>It uses magic functions to generate properties as needed. The properties defined on initialization and/or instantiation are:</p>

<ul>
  <li>core</li>
  <li>mp_classlib</li>
  <li>template</li>
  <li>tp_classlib</li>
  <li>vendor</li>
</ul>

<h3>Methods</h3>

<dl class="clamshell">

  <dt>Constructor</dt>
  <dd>
    <pre>$mpo_paths = new $mpc_paths( [bool $is_locked=false] );</pre>

    <p>On instantiation, can be passed boolean to determine whether to protect existing values. When protected, you can add new paths, but not overwrite old.</p>
  </dd>

  <dt>Store or update a path</dt>
  <dd>
    <pre>$mpo_paths-&gt;<var>path</var> = <var>value</var>;</pre>

    <p>Uses magic functions to generate properties as needed.</p>
  </dd>

  <dt>Return a path</dt>
  <dd>
    <pre>$result = $mpo_paths-&gt;<var>path</var>;</pre>
  </dd>

  <dt>Return all paths in an array</dt>
  <dd>
    <pre>$result = $mpo_paths-&gt;build_list();</pre>
  </dd>
</dl>
<!-- *** end contents ********************************************************* -->
<?php
                    # ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ EDIT ABOVE ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
                    # Content developers shouldn't touch anything below here.
                    # Invoke the template ------------------------------------- *
$mpo_parts->main_content = ob_get_clean();
ob_end_clean();
$page_elements = $mpo_parts->build_page();
echo ($twig->render($mpo_parts->template.$mpt_full_template, array('page'=>$page_elements['content'])));
?>
