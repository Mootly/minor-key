<?php
/* === Developer Notes - Variable Naming Conventions ========================== *
 * Copyright (c) 2017-2020 Mootly Obviate - See /LICENSE.md
 * --- Revision History ------------------------------------------------------- *
 * 2018-05-09 | Copied over from test page.
 * ---------------------------------------------------------------------------- */
                    # Call config to init the application
require_once( $_SERVER['DOCUMENT_ROOT'].'/config.php' );
                    # Build the page ------------------------------------------ *
                    # Content developers shouldn't touch anything above here.
                    # ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ EDIT BELOW ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
                    # page_name should equal your H1 title.
$mpo_parts->h1_title          = 'Naming Conventions';
$mpo_parts->link_title        = 'Naming Conventions';
$mpo_parts->page_name         = $mpo_parts->h1_title;
$mpo_parts->section_name      = 'Docs : CMS Dev Notes';
$mpo_parts->section_base      = $mpo_paths->docs;
$mpo_parts->bodyclasses       = 'final tech-notes';
$mpo_parts->pagemenu          = 'import';
                    # import page components that are not generated by template.
ob_start();
require_once( MP_ROOT.'/docs/_assets/includes/menu.docs.php' );
$mpo_parts->menu_left_content = ob_get_clean();
ob_end_clean();
require_once( $mpo_paths->php_widgets.'/menus/simple_crumbs.php' );
                                        # The main content body of the page is developed here.
                                        # It can be built from pieces or written as a block,
                                        # depending on the site.
ob_start();
?>
<!-- *** BEGIN CONTENT ******************************************************** -->

<p>MoosePress uses prefixes to designate namespaces reserved for use by core and to designate certain categories of variables. These prefexes are broken out by what they label.</p>

<p>You are encouraged to maintain these patterns when adding to the code base.</p>

<dl class="inline-terms">
  <dt id="dfn-prefix-usc">_ <small>(underscore)</small></dt><dd>System folders begin with an underscore to float them to the top. These are <b>_assets</b>, <b>_core</b>, and <b>_vendors</b>. Remember: <b>/_assets/</b> are template assets, while <b>/assets/</b> are content assets.</dd>
  <dt id="dfn-prefix-mpdef">DEF_</dt><dd>Site specific default constants. These should only be set in <b>init.php</b> or the template-specific equivalent.</dd>
  <dt id="dfn-prefix-mp">mp_</dt><dd>General use to clarify files and directories as part of the  code base.</dd>
  <dt id="dfn-prefix-mpk">MP_</dt><dd>Constants defined by core.</dd>
  <dt id="dfn-prefix-mpc">mpc_</dt><dd>Class definitions. There may be a fourth letter to specify specific the nature of the class definition.</dd>
  <dt id="dfn-prefix-mpf">mpf_</dt><dd>Functions. All public core functions are prefixed with <b>mpf_</b></dd>
  <dt id="dfn-prefix-mpo">mpo_</dt><dd>Object instances. All instantiated core objects should be prefixed with <b>mpo_</b>.</dd>
  <dt id="dfn-prefix-mpt">mpt_</dt><dd>Template settings.</dd>
  <dt id="dfn-prefix-mpv">mpv_</dt><dd>Variables. Most public core variables are prefixed with <b>mpv_</b>.</dd>
  <dt id="dfn-prefix-mppre">mppre_</dt><dd>User defined functions to run before a core function of the same name. Not all functions support this.</dd>
  <dt id="dfn-prefix-mppost">mppost_</dt><dd>User defined functions to run after a core function of the same name. Not all functions support this.</dd>
  <dt id="dfn-prefix-mptemp">t_, temp_</dt><dd>Temporary variables. They should be assumed to contain garbage and should never be used across more than a few lines of code.</dd>
  <dt id="dfn-prefix-mptp">tp_</dt><dd>Overrides from the current template.</dd>
  <dt id="dfn-prefix-mptpo">tpo_</dt><dd>Object instances. All instantiated objects from a template library should be prefixed with <b>mpo_</b>.</dd>
</dl>

<p>Some recommended ones for client-side scripts.</p>

<p>Using a prefix to spell out scope is epsecially useful when altering the code for backward compatability. It makes the former <code>let</code> and <code>const</code> calls easier to identify when they are all now <code>var</code>.</p>

<dl class="inline-terms">
  <dt id="dfn-prefix-mptsb">b_</dt><dd>Variables with block scope.</dd>
  <dt id="dfn-prefix-mptsc">c_</dt><dd>Constants with function/block scope.</dd>
  <dt id="dfn-prefix-mptsc">el_</dt><dd>Element nodes.</dd>
  <dt id="dfn-prefix-mpsf">f_</dt><dd>Variables with function scope.</dd>
  <dt id="dfn-prefix-mpsf">g_</dt><dd>Variables with global scope.</dd>
  <dt id="dfn-prefix-mptsc">nlist_</dt><dd>Node lists.</dd>
  <dt id="dfn-prefix-mpsf">p_</dt><dd>Parameters with function scope.</dd>
  <dt id="dfn-prefix-mpsf">v_</dt><dd>Just a prefix to keep those nonspecific variables from feeling left out.</dd>
</dl>
<!-- *** end contents ********************************************************* -->
<?php
                    # ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ EDIT ABOVE ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
                    # Content developers shouldn't touch anything below here.
$mpo_parts->main_content = ob_get_clean();
ob_end_clean();
                    // Submit to template generator --------------------------- *
mpf_renderPage($mpo_parts->template.$mpt_['default'].$mpt_['suffix'], $mpo_parts);
?>
