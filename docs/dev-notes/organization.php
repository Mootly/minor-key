<?php
/* === Developer Notes ======================================================== *
 * Copyright (c) 2017-2018 Mootly Obviate - See /LICENSE.md
 * --- Revision History ------------------------------------------------------- *
 * 2018-05-09 | Copied over from test page.
 * ---------------------------------------------------------------------------- */
                    # Call config to init the application
require_once( $_SERVER['DOCUMENT_ROOT'].'/config.php' );
                    # Build the page ------------------------------------------ *
                    # Content developers shouldn't touch anything above here.
                    # ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ EDIT BELOW ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
                    # page_name should equal your H1 title.
$mpo_parts->h1_title          = 'Code Organization';
$mpo_parts->link_title        = 'Code Organization';
$mpo_parts->page_name         = $mpo_parts->h1_title;
$mpo_parts->section_name      = 'Documentation: Developer Notes';
$mpo_parts->section_base      = '/docs';
$mpo_parts->accessibility     = 'standard';
$mpo_parts->pagemenu          = 'perm';
$mpo_parts->bodyclasses       = 'final';
$page_path                    = $mpo_parts->page_path;
                    # import page components that are not generated by template.
require_once( $mpo_paths->php_widgets.'/menus/simple_crumbs.php' );
                    # The main content body of the page is developed here.
                    # It can be built from pieces or written as a block,
                    # depending on the site.
ob_start();
?>
<!-- *** BEGIN CONTENT ******************************************************** -->
<p>These are the basic rules set out for writing code for this application.</p>

<p>The standards are kept pretty loose, but should be adhered to.</p>

<h3 class="add-toc">Component separation and processing order</h3>

<p>All core code has been written with the unidirectional flow described below. You can iterate, but not move backwards.</p>

<p>Direction of flow is enforced by encapsulation and an expection that a particular type of object will be passed each step of the way. Core files will include the following strings to indicate what part of the process they are involved with.</p>

<p>Request evaluation and computation:</p>
<dl class="inline-terms">
  <dt id="dfn-process-init">init</dt><dd>Initialize core.</dd>
  <dt id="dfn-process-grab">grab</dt><dd>Retrieve requests and accompanying data.</dd>
  <dt id="dfn-process-proc">proc</dt><dd>Process request data and gather response data.</dd>
</dl>

<p>Response assembly and presentation:</p>
<dl class="inline-terms">
  <dt id="dfn-process-prep">prep</dt><dd>Use the template to prepare response for presentation</dd>
  <dt id="dfn-process-send">send</dt><dd>Send response</dd>
</dl>
<!-- *** end contents ********************************************************* -->
<?php
                    # ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ EDIT ABOVE ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
                    # Content developers shouldn't touch anything below here.
                    # Invoke the template ------------------------------------- *
$mpo_parts->main_content = ob_get_clean();
ob_end_clean();
$page_elements = $mpo_parts->build_page();
echo ($twig->render($mpo_parts->template.$mpt_full_template, array('page'=>$page_elements['content'])));
?>
