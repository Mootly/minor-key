@import url("https://fonts.googleapis.com/css?family=Muli:400,600,700");@import url("https://fonts.googleapis.com/css?family=Prompt:400,600,700,900");@import url("https://fonts.googleapis.com/css?family=Source+Code+Pro");@import url("https://fonts.googleapis.com/css?family=Walter+Turncoat");@import url("https://fonts.googleapis.com/css?family=Short+Stack");@import url("https://fonts.googleapis.com/css?family=Fira+Mono:400,700&subset=latin-ext");html{font-size:100%;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;height:100%}body{margin:0;height:100%;font:"Muli","Arial",sans-serif}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}.lt-ie8 audio,.lt-ie8 canvas,.lt-ie8 video{display:inline;zoom:1}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}abbr{border-bottom:1px dotted #464a4b}b,strong{font-weight:inherit}b,strong{font-weight:bold}dfn,cite,em,i,var{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}pre{overflow:auto}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:focus{outline:thin dotted #464a4b;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}a:active,a:hover{outline:0;outline-width:0}img{border-style:none;border:0}img{max-width:100%;height:auto;vertical-align:middle;border:0;-ms-interpolation-mode:bicubic}.lt-ie8 img{width:auto\9}svg:not(:root){overflow:hidden}audio,canvas,iframe,img,svg,video{vertical-align:middle}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible;line-height:normal}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}input{line-height:normal}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #464a4b;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;border:0;white-space:normal}textarea{overflow:auto;vertical-align:top}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield;outline-offset:-2px}input[type="search"]::-webkit-search-decoration,input[type="search"]::-webkit-search-cancel-button{-webkit-appearance:none}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}label,select,button,input[type="button"],input[type="reset"],input[type="submit"],input[type="radio"],input[type="checkbox"]{cursor:pointer}@media print{*,*:before,*:after{text-shadow:none        !important;color:#000 !important;background:transparent !important;box-shadow:none        !important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #464a4b;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100% !important}@page{margin:0.25in}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}}#access-nav{width:100%;margin:0;padding:0}#access-nav h1,#access-nav h2,#access-nav p,#access-nav ol,#access-nav li,#access-nav a{position:absolute;clip:rect(0 0 0 0);width:1px;height:1px;overflow:hidden;margin:-1px;border:0;padding:0}.reader-only{display:block;position:absolute;top:0;left:-1000em}@media (min-width: 50em){#access-nav a:focus{display:block;position:static;clip:auto;width:100%;height:auto;overflow:visible;margin:0;padding:0.5em;background-color:#331440;text-align:center;color:#f6f3f4;font-weight:bold;font-size:1.25em;z-index:500}}body{box-sizing:border-box;position:relative;margin:0;padding:0;background-color:#f6f3f4;color:#110f10;font:normal normal 400 1em "Muli","Arial",sans-serif;line-height:1.75em}h1#first-el{position:absolute;clip:rect(0 0 0 0);width:1px;height:1px;overflow:hidden;margin:-1px;border:0;padding:0}#title-box{margin:0;background-color:#f6f3f4;border-bottom:2px solid #331440}#title-box h1,#title-box h2.page-title{margin:0;padding:0.5em 0.5em 0.125em 0.5em;font-family:"Prompt","Arial Black",sans-serif;font-size:2.5em;font-weight:900;line-height:1.0625em;color:#557}#content-main #content-box{margin:1.0em 2.0em 2.0em 20.0em;max-width:60em}#content-main p{line-height:1.375em}#content-main h2{margin:1.25em 0 0 0;font-family:"Prompt","Arial Black",sans-serif;font-wight:900;font-size:2em;line-height:1.0625em;color:#474762}#content-main h3{margin:1.25em 0 0 0;font-family:"Prompt","Arial Black",sans-serif;font-wight:700;font-size:1.75em;line-height:1.0625em;color:#3a394e}#content-main h4{margin:1.0em 0 0 0;font-family:"Prompt","Arial Black",sans-serif;font-wight:700;font-size:1.375em;line-height:1.0625em;color:#2c2b39}#content-main h5{margin:1.0em 0 0 0;font-family:"Prompt","Arial Black",sans-serif;font-wight:600;font-size:1.1875em;line-height:1.0625em;color:#1f1d25}#content-main h6{margin:1.0em 0 0 0;font-family:"Prompt","Arial Black",sans-serif;font-wight:600;font-size:1.0625em;line-height:1.0625em;color:#1f1d25}#content-main h2+p,#content-main h3+p,#content-main h4+p,#content-main h5+p,#content-main h6+p{margin-top:0.5em}#content-main a{color:#201188;text-decoration:none;border-bottom:1px solid #d6d1e4;border-bottom:1px solid rgba(32,17,136,0.15)}#content-main a:visited{color:#201188}#content-main a:hover{border-bottom:1px solid #403398;border-bottom:1px solid rgba(32,17,136,0.85);background-color:#f1edf0;background-color:rgba(51,20,64,0.025)}@media (max-width: 64em){.no-mobile{display:none}#breadcrumb-box{border-top:1px solid #c5bbc7;border-top:1px solid rgba(51,20,64,0.25)}#title-box{clear:both}#content-main{clear:both}#content-main #content-box{margin:2.0em}}#content-main #breadcrumb-box{padding:0.375em 0 0.25em 1.0em;background-color:#f6f3f4;color:#464a4b}#content-main #breadcrumb-box a{font-family:"Prompt","Arial",sans-serif;font-weight:bold;border:0}#content-main #breadcrumb-box a:hover{border-bottom:1px solid #23117d;border-bottom:1px solid rgba(32,17,136,0.85)}@media (max-width: 64em){#content-main #breadcrumb-box{background-color:#331440;border-top:1px solid #c5bbc7;border-top:1px solid rgba(51,20,64,0.25);border-bottom:1px solid #c5bbc7;border-bottom:1px solid rgba(51,20,64,0.25)}}pre{background-color:#e8e5e6;background-color:rgba(17,15,16,0.0625);border-left:.5em solid #bdbabb;border-left:.5em solid rgba(17,15,16,0.25);overflow:auto;color:#331440;padding:0.75em;font-family:"Source Code Pro",monospace;font-size:0.875em;line-height:1.75em}pre var{color:#4c404c;font-style:italic}code{font-family:"Source Code Pro",monospace;color:#331440}code var{color:#4c404c;font-style:italic}.center{text-align:center;margin-left:auto;margin-right:auto}.fleft{float:left;margin-right:1.0em}.fright{float:right;margin-left:1.0em}.clear-fix{clear:both}.clear-left{clear:left}.clear-right{clear:right}.fixed-top{position:fixed;top:0;left:0;width:100%}.fixed-bottom{position:fixed;bottom:0;left:0;width:100%}.mobile-only,.hide{display:none}.hidden{width:0;height:0;overflow:hidden}.toggleHide{display:none !important}.toggleShow{display:block !important}div.anchor,div.anchor:focus{outline:none}.anchor:before{display:block;position:relative;width:0;height:2.5em;margin-top:-2.5em;content:''}body.draft{font-family:"Short Stack","Arial",sans-serif}body.draft #title-box h1,body.draft #title-box h2.page-title{font-family:"Walter Turncoat","Arial Black",sans-serif}body.draft #content-main #breadcrumb-box a{font-family:"Walter Turncoat","Arial",sans-serif}body.draft #content-main h1,body.draft #content-main h2,body.draft #content-main h3,body.draft #content-main h4,body.draft #content-main h5,body.draft #content-main h6{font-family:"Walter Turncoat","Arial Black",sans-serif}body.draft pre,body.draft code{font-family:"Fira Mono","Source Code Pro",monospace}/*! -- Copyright (c) 2017-2018 Mootly Obviate -- See /LICENSE.md -------------- */

/*# sourceMappingURL=data:application/json;base64, */